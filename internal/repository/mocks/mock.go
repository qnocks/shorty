// Code generated by MockGen. DO NOT EDIT.
// Source: internal/repository/repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	dto "shorty/internal/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// FindByShortUrl mocks base method.
func (m *MockLink) FindByShortUrl(shortURL string) (dto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByShortUrl", shortURL)
	ret0, _ := ret[0].(dto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByShortUrl indicates an expected call of FindByShortUrl.
func (mr *MockLinkMockRecorder) FindByShortUrl(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByShortUrl", reflect.TypeOf((*MockLink)(nil).FindByShortUrl), shortURL)
}

// Save mocks base method.
func (m *MockLink) Save(link dto.Link) (dto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", link)
	ret0, _ := ret[0].(dto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockLinkMockRecorder) Save(link interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockLink)(nil).Save), link)
}

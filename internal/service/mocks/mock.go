// Code generated by MockGen. DO NOT EDIT.
// Source: internal/service/service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"
	dto "shorty/internal/dto"

	gomock "github.com/golang/mock/gomock"
)

// MockLink is a mock of Link interface.
type MockLink struct {
	ctrl     *gomock.Controller
	recorder *MockLinkMockRecorder
}

// MockLinkMockRecorder is the mock recorder for MockLink.
type MockLinkMockRecorder struct {
	mock *MockLink
}

// NewMockLink creates a new mock instance.
func NewMockLink(ctrl *gomock.Controller) *MockLink {
	mock := &MockLink{ctrl: ctrl}
	mock.recorder = &MockLinkMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLink) EXPECT() *MockLinkMockRecorder {
	return m.recorder
}

// CreateShortLink mocks base method.
func (m *MockLink) CreateShortLink(originURL string) (dto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShortLink", originURL)
	ret0, _ := ret[0].(dto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShortLink indicates an expected call of CreateShortLink.
func (mr *MockLinkMockRecorder) CreateShortLink(originURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShortLink", reflect.TypeOf((*MockLink)(nil).CreateShortLink), originURL)
}

// GetByShortURL mocks base method.
func (m *MockLink) GetByShortURL(shortURL string) (dto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByShortURL", shortURL)
	ret0, _ := ret[0].(dto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByShortURL indicates an expected call of GetByShortURL.
func (mr *MockLinkMockRecorder) GetByShortURL(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByShortURL", reflect.TypeOf((*MockLink)(nil).GetByShortURL), shortURL)
}

// ProcessURLClick mocks base method.
func (m *MockLink) ProcessURLClick(shortURL string) (dto.Link, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessURLClick", shortURL)
	ret0, _ := ret[0].(dto.Link)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessURLClick indicates an expected call of ProcessURLClick.
func (mr *MockLinkMockRecorder) ProcessURLClick(shortURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessURLClick", reflect.TypeOf((*MockLink)(nil).ProcessURLClick), shortURL)
}

// MockShortener is a mock of Shortener interface.
type MockShortener struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerMockRecorder
}

// MockShortenerMockRecorder is the mock recorder for MockShortener.
type MockShortenerMockRecorder struct {
	mock *MockShortener
}

// NewMockShortener creates a new mock instance.
func NewMockShortener(ctrl *gomock.Controller) *MockShortener {
	mock := &MockShortener{ctrl: ctrl}
	mock.recorder = &MockShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShortener) EXPECT() *MockShortenerMockRecorder {
	return m.recorder
}

// Shorten mocks base method.
func (m *MockShortener) Shorten(str string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shorten", str)
	ret0, _ := ret[0].(string)
	return ret0
}

// Shorten indicates an expected call of Shorten.
func (mr *MockShortenerMockRecorder) Shorten(str interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shorten", reflect.TypeOf((*MockShortener)(nil).Shorten), str)
}
